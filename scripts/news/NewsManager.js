/**
 * NewsManager - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Å–ø–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—é –Ω–æ–≤–æ—Å—Ç–µ–π
 */
class NewsManager {
    constructor(containerId = '.main-articles') {
        this.container = document.querySelector(containerId);
        this.loader = new NewsLoader();
        this.pagination = new NewsPagination();
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ
        this.currentPage = 1;
        this.itemsPerPage = 6;
        this.currentCategory = 'all';
        this.searchQuery = '';
        this.allArticles = [];
        this.filteredArticles = [];
        this.currentArchiveFilter = null; // –¢–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä –ø–æ –∞—Ä—Ö–∏–≤—É
        this.currentArchiveYear = null; // –¢–µ–∫—É—â–∏–π –≥–æ–¥ –≤ –∞—Ä—Ö–∏–≤–µ
        
        // –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        this.loadingElement = document.querySelector('.loading-overlay');
        this.errorElement = document.querySelector('.error-message');
        this.categoryTabs = document.querySelectorAll('.news-filter-tab');
        this.searchInput = document.querySelector('.news-search');
        this.searchClearBtn = document.querySelector('.search-clear-btn');
        this.paginationContainer = null; // –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
        this.sidebarContainer = document.querySelector('.news-sidebar');
        this.statsElements = {
            total: document.getElementById('total-articles'),
            thisMonth: document.getElementById('this-month')
        };
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –Ω–æ–≤–æ—Å—Ç–µ–π
     */
    async init() {
        try {
            this.showLoading();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ç—å–∏ –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
            this.allArticles = await this.loader.scanArticles();
            this.filteredArticles = [...this.allArticles];
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await this.updateStats();
            
            // –†–µ–Ω–¥–µ—Ä–∏–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            await this.render();
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
            this.setupEvents();
            
            this.hideLoading();
            
        } catch (error) {
            console.error('NewsManager initialization failed:', error);
            this.showError('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–æ–≤–∏–Ω');
        }
    }

    /**
     * –†–µ–Ω–¥–µ—Ä–∏—Ç —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–æ–≤–æ—Å—Ç–µ–π
     */
    async render() {
        if (!this.container) return;

        const startIndex = (this.currentPage - 1) * this.itemsPerPage;
        const articles = this.filteredArticles.slice(startIndex, startIndex + this.itemsPerPage);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        this.updatePageTitle();

        if (articles.length === 0) {
            this.renderEmpty();
            return;
        }

        // –†–µ–Ω–¥–µ—Ä–∏–º –≤—Å–µ —Å—Ç–∞—Ç—å–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ
        let html = '';
        articles.forEach((article) => {
            html += this.renderArticleCard(article, false);
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Ü–µ
        html += '<div class="pagination" style="display: none;"></div>';
        
        this.container.innerHTML = html;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∞
        this.paginationContainer = this.container.querySelector('.pagination');
        
        // –†–µ–Ω–¥–µ—Ä–∏–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        if (this.paginationContainer) {
            this.pagination.render({
                currentPage: this.currentPage,
                totalItems: this.filteredArticles.length,
                itemsPerPage: this.itemsPerPage,
                containerId: '.main-articles .pagination',
                onPageChange: (page) => this.goToPage(page)
            });
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∞–π–¥–±–∞—Ä
        await this.renderSidebar();

        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏
        this.animateArticles();
    }

    /**
     * –†–µ–Ω–¥–µ—Ä–∏—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Å—Ç–∞—Ç—å–∏
     */
    renderArticleCard(article, isFeatured = false) {
        const imageUrl = article.image?.url || article.image || '';
        const categoryName = this.getCategoryName(article.category);
        const formattedDate = this.formatDate(article.publishedAt);
        const articleUrl = `news-article.html?id=${article.slugId}`;

        if (isFeatured) {
            return `
                <article class="featured-article" data-category="${article.category}">
                    <div class="article-image">
                        ${imageUrl ? `<img src="${imageUrl}" alt="${article.title}" loading="lazy">` : ''}
                    </div>
                    <div class="article-content">
                        <span class="article-category">${categoryName}</span>
                        <h2 class="article-title">${article.title}</h2>
                        <p class="article-excerpt">${article.excerpt}</p>
                        <div class="article-meta">
                            <span class="article-date">${formattedDate}</span>
                            <a href="${articleUrl}" class="read-more-btn">–ß–∏—Ç–∞—Ç–∏ –¥–∞–ª—ñ</a>
                        </div>
                    </div>
                </article>
            `;
        } else {
            return `
                <article class="regular-article" data-category="${article.category}">
                    <div class="article-image">
                        ${imageUrl ? `<img src="${imageUrl}" alt="${article.title}" loading="lazy">` : '<div class="article-image-placeholder"></div>'}
                    </div>
                    <div class="article-content">
                        <span class="article-category">${categoryName}</span>
                        <h3 class="article-title">${article.title}</h3>
                        <p class="article-excerpt">${article.excerpt}</p>
                        <div class="article-meta">
                            <span class="article-date">${formattedDate}</span>
                            <a href="${articleUrl}" class="read-more-btn">–ß–∏—Ç–∞—Ç–∏ –¥–∞–ª—ñ</a>
                        </div>
                    </div>
                </article>
            `;
        }
    }

    /**
     * –†–µ–Ω–¥–µ—Ä–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–Ω–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π"
     */
    renderEmpty() {
        let message = '';
        let resetButton = '';
        
        if (this.currentArchiveFilter) {
            const [year, month] = this.currentArchiveFilter.split('-').map(Number);
            const monthNames = [
                '–°—ñ—á–µ–Ω—å', '–õ—é—Ç–∏–π', '–ë–µ—Ä–µ–∑–µ–Ω—å', '–ö–≤—ñ—Ç–µ–Ω—å', '–¢—Ä–∞–≤–µ–Ω—å', '–ß–µ—Ä–≤–µ–Ω—å',
                '–õ–∏–ø–µ–Ω—å', '–°–µ—Ä–ø–µ–Ω—å', '–í–µ—Ä–µ—Å–µ–Ω—å', '–ñ–æ–≤—Ç–µ–Ω—å', '–õ–∏—Å—Ç–æ–ø–∞–¥', '–ì—Ä—É–¥–µ–Ω—å'
            ];
            const monthName = monthNames[month - 1];
            message = `–í –∞—Ä—Ö—ñ–≤—ñ –∑–∞ ${monthName} ${year} –Ω–æ–≤–∏–Ω–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ`;
            resetButton = '<button class="btn btn-outline" onclick="newsManager.clearArchiveFilter()">–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –Ω–æ–≤–∏–Ω–∏</button>';
        } else if (this.searchQuery) {
            message = `–ó–∞ –∑–∞–ø–∏—Ç–æ–º "${this.searchQuery}" –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`;
            resetButton = '<button class="btn btn-outline" onclick="newsManager.clearSearch()">–°–∫–∏–Ω—É—Ç–∏ –ø–æ—à—É–∫</button>';
        } else {
            message = '–ù–æ–≤–∏–Ω–∏ –≤ —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–æ–∫–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ';
        }

        this.container.innerHTML = `
            <div class="news-empty">
                <div class="news-empty-icon">üì∞</div>
                <h3>–ù–æ–≤–∏–Ω–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</h3>
                <p>${message}</p>
                ${resetButton}
            </div>
            <div class="pagination" style="display: none;"></div>
        `;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        this.paginationContainer = this.container.querySelector('.pagination');

        // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        this.pagination.hide();
    }

    /**
     * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
     */
    async filterByCategory(category) {
        this.currentCategory = category;
        this.currentPage = 1;
        this.currentArchiveFilter = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        this.applyAllFilters();
        this.updateActiveTab(category);
        await this.render();
    }

    /**
     * –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
     */
    async search(query) {
        this.searchQuery = query.toLowerCase().trim();
        this.currentPage = 1;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        this.applyAllFilters();
        await this.render();
    }

    /**
     * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã (–∫–∞—Ç–µ–≥–æ—Ä–∏—è, –∞—Ä—Ö–∏–≤, –ø–æ–∏—Å–∫)
     */
    applyAllFilters() {
        // –ù–∞—á–∏–Ω–∞–µ–º —Å–æ –≤—Å–µ—Ö —Å—Ç–∞—Ç–µ–π
        this.filteredArticles = [...this.allArticles];
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (this.currentCategory !== 'all') {
            this.filteredArticles = this.filteredArticles.filter(article => 
                article.category === this.currentCategory
            );
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –∞—Ä—Ö–∏–≤—É
        if (this.currentArchiveFilter) {
            const [year, month] = this.currentArchiveFilter.split('-').map(Number);
            this.filteredArticles = this.filteredArticles.filter(article => {
                const date = new Date(article.publishedAt);
                return date.getFullYear() === year && (date.getMonth() + 1) === month;
            });
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä
        this.applySearch();
    }

    /**
     * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä
     */
    applySearch() {
        if (!this.searchQuery) return;
        
        this.filteredArticles = this.filteredArticles.filter(article => 
            article.title.toLowerCase().includes(this.searchQuery) ||
            article.excerpt.toLowerCase().includes(this.searchQuery) ||
            (article.tags && article.tags.some(tag => 
                tag.toLowerCase().includes(this.searchQuery)
            ))
        );
    }

    /**
     * –†–µ–Ω–¥–µ—Ä–∏—Ç —Å–∞–π–¥–±–∞—Ä
     */
    async renderSidebar() {
        if (!this.sidebarContainer) return;

        const latestArticles = this.allArticles
            .sort((a, b) => new Date(b.publishedAt) - new Date(a.publishedAt))
            .slice(0, 5);
        
        const categories = this.getCategories();

        const sidebarHTML = `
            <div class="sidebar-widget">
                <h3>–û—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏</h3>
                <div class="latest-news">
                    ${latestArticles.map(article => `
                        <div class="latest-news-item">
                            <a href="news-article.html?id=${article.slugId}">
                                <h4>${article.title}</h4>
                                <span class="date">${this.formatDate(article.publishedAt)}</span>
                            </a>
                        </div>
                    `).join('')}
                </div>
            </div>

            <div class="sidebar-widget">
                <h3>–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó</h3>
                <div class="categories-list">
                    ${categories.map(cat => `
                        <div class="category-item">
                            <a href="#" data-category="${cat.id}">
                                ${cat.name} (${cat.count})
                            </a>
                        </div>
                    `).join('')}
                </div>
            </div>

            ${this.renderAdvancedArchive()}

            <div class="sidebar-widget">
                <h3>–ù–∞—à—ñ –ø–∞—Ä—Ç–Ω–µ—Ä–∏</h3>
                <div class="sponsors-grid">
                    <div class="sponsor-item">
                        <img src="assets/TAS_logo.png" alt="TAS" class="sponsor-logo">
                    </div>
                    <div class="sponsor-item">
                        <img src="assets/etg-logo.png" alt="ETG" class="sponsor-logo">
                    </div>
                    <div class="sponsor-item">
                        <img src="assets/frutex-logo.png" alt="Frutex" class="sponsor-logo">
                    </div>
                    <div class="sponsor-item">
                        <img src="assets/leon-logo.png" alt="Leon" class="sponsor-logo">
                    </div>
                    <div class="sponsor-item">
                        <img src="assets/mir-logo.png" alt="Mir" class="sponsor-logo">
                    </div>
                    <div class="sponsor-item">
                        <img src="assets/petrikiv-logo.png" alt="Petrikiv" class="sponsor-logo">
                    </div>
                </div>
            </div>
        `;

        this.sidebarContainer.innerHTML = sidebarHTML;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞—Ä—Ö–∏–≤–∞
        this.setupArchiveEvents();
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞—Ä—Ö–∏–≤–∞
     */
    setupArchiveEvents() {
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        const categoryLinks = this.sidebarContainer.querySelectorAll('.category-item a');
        console.log('Setting up category events for', categoryLinks.length, 'links');
        
        categoryLinks.forEach(link => {
            const category = link.getAttribute('data-category');
            
            link.addEventListener('click', (e) => {
                e.preventDefault();
                console.log('Category link clicked for:', category);
                if (category) {
                    this.filterByCategory(category);
                }
            });
        });

        // –ù–æ–≤—ã–π –∞—Ä—Ö–∏–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç onclick –∞—Ç—Ä–∏–±—É—Ç—ã, –ø–æ—ç—Ç–æ–º—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞
        console.log('Archive events setup completed for advanced archive navigation');
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∞—Ä—Ö–∏–≤ –ø–æ –º–µ—Å—è—Ü–∞–º
     */
    getArchiveByMonth() {
        const months = {};
        const monthNames = [
            '–°—ñ—á–µ–Ω—å', '–õ—é—Ç–∏–π', '–ë–µ—Ä–µ–∑–µ–Ω—å', '–ö–≤—ñ—Ç–µ–Ω—å', '–¢—Ä–∞–≤–µ–Ω—å', '–ß–µ—Ä–≤–µ–Ω—å',
            '–õ–∏–ø–µ–Ω—å', '–°–µ—Ä–ø–µ–Ω—å', '–í–µ—Ä–µ—Å–µ–Ω—å', '–ñ–æ–≤—Ç–µ–Ω—å', '–õ–∏—Å—Ç–æ–ø–∞–¥', '–ì—Ä—É–¥–µ–Ω—å'
        ];

        this.allArticles.forEach(article => {
            const date = new Date(article.publishedAt);
            const year = date.getFullYear();
            const month = date.getMonth() + 1;
            const key = `${year}-${month}`;

            if (!months[key]) {
                months[key] = {
                    year,
                    month,
                    name: monthNames[month - 1],
                    count: 0
                };
            }
            months[key].count++;
        });

        return Object.values(months).sort((a, b) => {
            if (a.year !== b.year) return b.year - a.year;
            return b.month - a.month;
        });
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
     */
    getCategories() {
        const categories = {};
        
        this.allArticles.forEach(article => {
            if (!categories[article.category]) {
                categories[article.category] = {
                    id: article.category,
                    name: this.getCategoryName(article.category),
                    count: 0
                };
            }
            categories[article.category].count++;
        });

        return Object.values(categories);
    }

    /**
     * –†–µ–Ω–¥–µ—Ä–∏—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤
     */
    renderAdvancedArchive() {
        const archiveData = this.getArchiveData();
        const currentYear = this.currentArchiveYear || new Date().getFullYear();
        const availableYears = archiveData.years;
        const monthsData = archiveData.monthsByYear[currentYear] || [];

        return `
            <div class="sidebar-widget">
                <div class="archive-navigation" data-year="${currentYear}">
                    <div class="archive-header">
                        <h3 class="archive-title">–ê—Ä—Ö—ñ–≤ –Ω–æ–≤–∏–Ω</h3>
                        <button class="archive-toggle" onclick="newsManager.toggleArchive()">
                            <span>–ó–≥–æ—Ä–Ω—É—Ç–∏</span>
                            <svg class="archive-toggle-icon" width="12" height="8" viewBox="0 0 12 8">
                                <path d="M1 7L6 2L11 7" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            </svg>
                        </button>
                    </div>
                    
                    <div class="year-navigation">
                        <button class="year-nav-btn" onclick="newsManager.changeArchiveYear(${currentYear - 1})" 
                                ${!availableYears.includes(currentYear - 1) ? 'disabled' : ''}>
                            ‚Äπ
                        </button>
                        <div class="current-year">${currentYear}</div>
                        <button class="year-nav-btn" onclick="newsManager.changeArchiveYear(${currentYear + 1})" 
                                ${!availableYears.includes(currentYear + 1) ? 'disabled' : ''}>
                            ‚Ä∫
                        </button>
                    </div>
                    
                    <div class="months-grid">
                        ${this.renderMonthsGrid(monthsData, currentYear)}
                    </div>
                    
                    <div class="archive-summary">
                        <div class="summary-stats">
                            <div class="summary-item">
                                <span class="summary-number">${archiveData.totalArticles}</span>
                                <span class="summary-label">–í—Å—å–æ–≥–æ</span>
                            </div>
                            <div class="summary-divider"></div>
                            <div class="summary-item">
                                <span class="summary-number">${monthsData.reduce((sum, m) => sum + m.count, 0)}</span>
                                <span class="summary-label">${currentYear}</span>
                            </div>
                        </div>
                    </div>
                    
                    ${this.currentArchiveFilter ? `
                        <button class="clear-archive-filter" onclick="newsManager.clearArchiveFilter()">
                            –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –Ω–æ–≤–∏–Ω–∏
                        </button>
                    ` : ''}
                </div>
            </div>
        `;
    }

    /**
     * –†–µ–Ω–¥–µ—Ä–∏—Ç —Å–µ—Ç–∫—É –º–µ—Å—è—Ü–µ–≤
     */
    renderMonthsGrid(monthsData, year) {
        const monthNames = [
            '–°—ñ—á', '–õ—é—Ç', '–ë–µ—Ä', '–ö–≤—ñ', '–¢—Ä–∞', '–ß–µ—Ä',
            '–õ–∏–ø', '–°–µ—Ä', '–í–µ—Ä', '–ñ–æ–≤', '–õ–∏—Å', '–ì—Ä—É'
        ];

        return monthNames.map((name, index) => {
            const month = index + 1;
            const monthData = monthsData.find(m => m.month === month);
            const count = monthData ? monthData.count : 0;
            const dateKey = `${year}-${month}`;
            const isActive = this.currentArchiveFilter === dateKey;
            const isDisabled = count === 0;

            return `
                <div class="month-item ${isActive ? 'active' : ''} ${isDisabled ? 'disabled' : ''}" 
                     onclick="${!isDisabled ? `newsManager.filterByDate('${dateKey}')` : ''}">
                    <span class="month-name">${name}</span>
                    <span class="month-count">${count}</span>
                </div>
            `;
        }).join('');
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞—Ä—Ö–∏–≤–∞
     */
    getArchiveData() {
        const monthsByYear = {};
        const years = new Set();
        const monthNames = [
            '–°—ñ—á–µ–Ω—å', '–õ—é—Ç–∏–π', '–ë–µ—Ä–µ–∑–µ–Ω—å', '–ö–≤—ñ—Ç–µ–Ω—å', '–¢—Ä–∞–≤–µ–Ω—å', '–ß–µ—Ä–≤–µ–Ω—å',
            '–õ–∏–ø–µ–Ω—å', '–°–µ—Ä–ø–µ–Ω—å', '–í–µ—Ä–µ—Å–µ–Ω—å', '–ñ–æ–≤—Ç–µ–Ω—å', '–õ–∏—Å—Ç–æ–ø–∞–¥', '–ì—Ä—É–¥–µ–Ω—å'
        ];

        this.allArticles.forEach(article => {
            const date = new Date(article.publishedAt);
            const year = date.getFullYear();
            const month = date.getMonth() + 1;

            years.add(year);

            if (!monthsByYear[year]) {
                monthsByYear[year] = [];
            }

            let monthData = monthsByYear[year].find(m => m.month === month);
            if (!monthData) {
                monthData = {
                    year,
                    month,
                    name: monthNames[month - 1],
                    count: 0
                };
                monthsByYear[year].push(monthData);
            }
            monthData.count++;
        });

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Å—è—Ü—ã –≤ –∫–∞–∂–¥–æ–º –≥–æ–¥—É
        Object.keys(monthsByYear).forEach(year => {
            monthsByYear[year].sort((a, b) => a.month - b.month);
        });

        return {
            years: Array.from(years).sort((a, b) => b - a),
            monthsByYear,
            totalArticles: this.allArticles.length
        };
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–∞
     */
    toggleArchive() {
        const archiveNav = this.sidebarContainer.querySelector('.archive-navigation');
        if (archiveNav) {
            archiveNav.classList.toggle('collapsed');
            const toggleBtn = archiveNav.querySelector('.archive-toggle span');
            const isCollapsed = archiveNav.classList.contains('collapsed');
            toggleBtn.textContent = isCollapsed ? '–†–æ–∑–≥–æ—Ä–Ω—É—Ç–∏' : '–ó–≥–æ—Ä–Ω—É—Ç–∏';
        }
    }

    /**
     * –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ–¥–∞ –≤ –∞—Ä—Ö–∏–≤–µ
     */
    async changeArchiveYear(year) {
        this.currentArchiveYear = year;
        await this.renderSidebar();
        this.setupArchiveEvents();
    }

    /**
     * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ
     */
    async filterByDate(dateKey) {
        console.log('filterByDate called with:', dateKey);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∞—Ä—Ö–∏–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
        this.currentArchiveFilter = dateKey;
        
        console.log('Filtering articles for date:', dateKey);
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ "–≤—Å–µ" –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∞—Ä—Ö–∏–≤—É
        this.currentCategory = 'all';
        this.currentPage = 1;
        // –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∏—Å–∫ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Ö–æ—Ç–µ—Ç—å –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –º–µ—Å—è—Ü–µ
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        this.applyAllFilters();

        console.log('Filtered articles count:', this.filteredArticles.length);

        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        this.updateActiveTab('all');
        
        await this.render();
        
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –Ω–∞—á–∞–ª—É
        window.scrollTo({ top: 0, behavior: 'smooth' });
    }

    /**
     * –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
     */
    async goToPage(page) {
        this.currentPage = page;
        await this.render();
        window.scrollTo({ top: 0, behavior: 'smooth' });
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
     */
    async clearSearch() {
        this.searchQuery = '';
        
        if (this.searchInput) {
            this.searchInput.value = '';
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã (–∫—Ä–æ–º–µ –ø–æ–∏—Å–∫–∞)
        this.applyAllFilters();
        
        await this.render();
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
     */
    async clearArchiveFilter() {
        this.currentArchiveFilter = null;
        this.currentPage = 1;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã (–∫—Ä–æ–º–µ –∞—Ä—Ö–∏–≤–∞)
        this.applyAllFilters();
        
        await this.render();
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    async updateStats() {
        try {
            const stats = await this.loader.getStats();
            
            if (this.statsElements.total) {
                this.statsElements.total.textContent = stats.total;
            }
            
            if (this.statsElements.thisMonth) {
                this.statsElements.thisMonth.textContent = stats.thisMonth;
            }
        } catch (error) {
            console.warn('Failed to update stats:', error);
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π
     */
    setupEvents() {
        // –§–∏–ª—å—Ç—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        this.categoryTabs.forEach(tab => {
            tab.addEventListener('click', (e) => {
                e.preventDefault();
                this.filterByCategory(tab.dataset.category);
            });
        });

        // –ü–æ–∏—Å–∫
        if (this.searchInput) {
            let searchTimeout;
            this.searchInput.addEventListener('input', (e) => {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(() => {
                    this.search(e.target.value);
                }, 300);
            });
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
     */
    updateActiveTab(category) {
        this.categoryTabs.forEach(tab => {
            tab.classList.toggle('active', tab.dataset.category === category);
        });
    }

    /**
     * –ê–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è —Å—Ç–∞—Ç–µ–π
     */
    animateArticles() {
        const articles = this.container.querySelectorAll('.news-card');
        articles.forEach((article, index) => {
            article.style.opacity = '0';
            article.style.transform = 'translateY(20px)';
            
            setTimeout(() => {
                article.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
                article.style.opacity = '1';
                article.style.transform = 'translateY(0)';
            }, index * 100);
        });
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
     */
    showLoading() {
        if (this.loadingElement) {
            this.loadingElement.style.display = 'flex';
        }
        if (this.container) {
            this.container.style.display = 'none';
        }
    }

    /**
     * –°–∫—Ä—ã—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
     */
    hideLoading() {
        if (this.loadingElement) {
            this.loadingElement.style.display = 'none';
        }
        if (this.container) {
            this.container.style.display = 'grid';
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
     */
    showError(message) {
        this.hideLoading();
        if (this.errorElement) {
            this.errorElement.textContent = message;
            this.errorElement.style.display = 'block';
        }
    }

    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
     */
    getCategoryName(category) {
        const categories = {
            'achievements': '–î–æ—Å—è–≥–Ω–µ–Ω–Ω—è',
            'competitions': '–ó–º–∞–≥–∞–Ω–Ω—è', 
            'events': '–ü–æ–¥—ñ—ó',
            'announcements': '–ê–Ω–æ–Ω—Å–∏',
            'interviews': '–Ü–Ω—Ç–µ—Ä–≤\'—é',
            'education': '–û—Å–≤—ñ—Ç–∞'
        };
        return categories[category] || category;
    }

    formatDate(dateString) {
        const date = new Date(dateString);
        return date.toLocaleDateString('uk-UA', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    updatePageTitle() {
        const heroTitle = document.querySelector('.hero-title');
        const heroDescription = document.querySelector('.hero-description');
        
        if (!heroTitle || !heroDescription) return;

        if (this.currentArchiveFilter) {
            const [year, month] = this.currentArchiveFilter.split('-').map(Number);
            const monthNames = [
                '–°—ñ—á–µ–Ω—å', '–õ—é—Ç–∏–π', '–ë–µ—Ä–µ–∑–µ–Ω—å', '–ö–≤—ñ—Ç–µ–Ω—å', '–¢—Ä–∞–≤–µ–Ω—å', '–ß–µ—Ä–≤–µ–Ω—å',
                '–õ–∏–ø–µ–Ω—å', '–°–µ—Ä–ø–µ–Ω—å', '–í–µ—Ä–µ—Å–µ–Ω—å', '–ñ–æ–≤—Ç–µ–Ω—å', '–õ–∏—Å—Ç–æ–ø–∞–¥', '–ì—Ä—É–¥–µ–Ω—å'
            ];
            const monthName = monthNames[month - 1];
            heroTitle.textContent = `–ê—Ä—Ö—ñ–≤ –Ω–æ–≤–∏–Ω - ${monthName} ${year}`;
            heroDescription.textContent = `–ù–æ–≤–∏–Ω–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –¥–∑—é–¥–æ –∑–∞ ${monthName} ${year} —Ä–æ–∫—É`;
        } else if (this.searchQuery) {
            heroTitle.textContent = `–ü–æ—à—É–∫: "${this.searchQuery}"`;
            heroDescription.textContent = `–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –∑–∞ –∑–∞–ø–∏—Ç–æ–º "${this.searchQuery}"`;
        } else if (this.currentCategory !== 'all') {
            const categoryName = this.getCategoryName(this.currentCategory);
            heroTitle.textContent = `${categoryName} - –ù–æ–≤–∏–Ω–∏`;
            heroDescription.textContent = `–û—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏ —É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "${categoryName}"`;
        } else {
            heroTitle.textContent = '–ù–æ–≤–∏–Ω–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –¥–∑—é–¥–æ';
            heroDescription.textContent = '–°—Ç–µ–∂—Ç–µ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–º–∏ –ø–æ–¥—ñ—è–º–∏, –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è–º–∏ —Ç–∞ –∞–Ω–æ–Ω—Å–∞–º–∏ –§–µ–¥–µ—Ä–∞—Ü—ñ—ó –î–∑—é–¥–æ –£–∫—Ä–∞—ó–Ω–∏';
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä-–±–∞—Ä
        this.updateFilterBar();
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    updateFilterBar() {
        // –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ñ–∏–ª—å—Ç—Ä-–±–∞—Ä–∞
        let filterBar = document.querySelector('.active-filters-bar');
        const newsContent = document.querySelector('.news-content .container');
        
        if (!filterBar && newsContent) {
            filterBar = document.createElement('div');
            filterBar.className = 'active-filters-bar';
            
            // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤, –Ω–æ –ø–µ—Ä–µ–¥ grid
            const newsGrid = document.querySelector('.news-grid');
            newsContent.insertBefore(filterBar, newsGrid);
        }
        
        if (!filterBar) return;
        
        // –°–æ–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        const activeFilters = [];
        
        if (this.currentArchiveFilter) {
            const [year, month] = this.currentArchiveFilter.split('-').map(Number);
            const monthNames = [
                '–°—ñ—á–µ–Ω—å', '–õ—é—Ç–∏–π', '–ë–µ—Ä–µ–∑–µ–Ω—å', '–ö–≤—ñ—Ç–µ–Ω—å', '–¢—Ä–∞–≤–µ–Ω—å', '–ß–µ—Ä–≤–µ–Ω—å',
                '–õ–∏–ø–µ–Ω—å', '–°–µ—Ä–ø–µ–Ω—å', '–í–µ—Ä–µ—Å–µ–Ω—å', '–ñ–æ–≤—Ç–µ–Ω—å', '–õ–∏—Å—Ç–æ–ø–∞–¥', '–ì—Ä—É–¥–µ–Ω—å'
            ];
            const monthName = monthNames[month - 1];
            activeFilters.push({
                type: 'archive',
                label: `üìÖ ${monthName} ${year}`,
                action: 'clearArchiveFilter'
            });
        }
        
        if (this.searchQuery) {
            activeFilters.push({
                type: 'search',
                label: `üîç "${this.searchQuery}"`,
                action: 'clearSearch'
            });
        }
        
        if (this.currentCategory !== 'all') {
            const categoryName = this.getCategoryName(this.currentCategory);
            activeFilters.push({
                type: 'category',
                label: `üìÇ ${categoryName}`,
                action: () => this.filterByCategory('all')
            });
        }
        
        // –†–µ–Ω–¥–µ—Ä–∏–º —Ñ–∏–ª—å—Ç—Ä-–±–∞—Ä
        if (activeFilters.length > 0) {
            filterBar.innerHTML = `
                <div class="filter-bar-content">
                    <span class="filter-bar-label">–ê–∫—Ç–∏–≤–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏:</span>
                    <div class="filter-tags">
                        ${activeFilters.map(filter => `
                            <div class="filter-tag">
                                <span class="filter-tag-label">${filter.label}</span>
                                <button class="filter-tag-remove" onclick="newsManager.${typeof filter.action === 'string' ? filter.action + '()' : 'filterByCategory(\'all\')'}" title="–í–∏–¥–∞–ª–∏—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä">
                                    ‚úï
                                </button>
                            </div>
                        `).join('')}
                        <button class="clear-all-filters" onclick="newsManager.clearAllFilters()">
                            –°–∫–∏–Ω—É—Ç–∏ –≤—Å—ñ —Ñ—ñ–ª—å—Ç—Ä–∏
                        </button>
                    </div>
                </div>
            `;
            filterBar.style.display = 'block';
        } else {
            filterBar.style.display = 'none';
        }
    }

    /**
     * –û—á–∏—â–∞–µ—Ç –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
     */
    async clearAllFilters() {
        this.currentCategory = 'all';
        this.currentArchiveFilter = null;
        this.searchQuery = '';
        this.currentPage = 1;
        
        if (this.searchInput) {
            this.searchInput.value = '';
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º "—á–∏—Å—Ç—ã–µ" —Ñ–∏–ª—å—Ç—Ä—ã (–≤—Å–µ —Å–±—Ä–æ—à–µ–Ω—ã)
        this.applyAllFilters();
        this.updateActiveTab('all');
        await this.render();
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç
if (typeof window !== 'undefined') {
    window.NewsManager = NewsManager;
} 