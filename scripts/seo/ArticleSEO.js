/**
 * ArticleSEO - –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è SEO –º–µ—Ç–∞-—Ç–µ–≥–∞–º–∏ —Å—Ç–∞—Ç—å–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
 * –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç meta-—Ç–µ–≥–∏, Open Graph, Twitter Cards –∏ JSON-LD –¥–∞–Ω–Ω—ã–µ
 */
class ArticleSEO {
    constructor() {
        this.baseUrl = 'https://ukraine-judo.github.io/';
        this.defaultImage = 'assets/fju-logo.png';
        this.organizationName = '–§–µ–¥–µ—Ä–∞—Ü—ñ—è –î–∑—é–¥–æ –£–∫—Ä–∞—ó–Ω–∏';
        this.organizationLogo = 'assets/fju-logo.png';
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ SEO –º–µ—Ç–∞-—Ç–µ–≥–∏ –¥–ª—è —Å—Ç–∞—Ç—å–∏
     * @param {Object} article - –û–±—ä–µ–∫—Ç —Å—Ç–∞—Ç—å–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
     */
    updateArticleSEO(article) {
        if (!article) {
            console.error('ArticleSEO: article data is required');
            return;
        }

        try {
            // –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
            const articleData = this.prepareArticleData(article);
            
            // –û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –º–µ—Ç–∞-—Ç–µ–≥–∏
            this.updateBasicMetaTags(articleData);
            
            // –û–±–Ω–æ–≤–∏—Ç—å Open Graph
            this.updateOpenGraphTags(articleData);
            
            // –û–±–Ω–æ–≤–∏—Ç—å Twitter Cards
            this.updateTwitterTags(articleData);
            
            // –û–±–Ω–æ–≤–∏—Ç—å JSON-LD structured data
            this.updateStructuredData(articleData);
            
            // –û–±–Ω–æ–≤–∏—Ç—å breadcrumbs
            this.updateBreadcrumbs(articleData);
            
            // –û–±–Ω–æ–≤–∏—Ç—å canonical URL
            this.updateCanonicalUrl(articleData);
            
            console.log('ArticleSEO: Successfully updated all meta tags');
        } catch (error) {
            console.error('ArticleSEO: Error updating meta tags:', error);
        }
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
     */
    prepareArticleData(article) {
        const url = this.getCurrentArticleUrl();
        const imageUrl = this.getFullImageUrl(article.image);
        const publishDate = this.formatDate(article.date);
        const modifiedDate = article.modifiedDate ? this.formatDate(article.modifiedDate) : publishDate;
        
        // –°–æ–∑–¥–∞—Ç—å SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π title
        const seoTitle = this.createSEOTitle(article.title, article.category);
        
        // –°–æ–∑–¥–∞—Ç—å SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ description
        const seoDescription = this.createSEODescription(article.excerpt || article.title, article.category);
        
        // –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å keywords
        const keywords = this.createKeywords(article);

        return {
            ...article,
            url,
            imageUrl,
            publishDate,
            modifiedDate,
            seoTitle,
            seoDescription,
            keywords
        };
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
     */
    createSEOTitle(title, category) {
        const emoji = this.getCategoryEmoji(category);
        const shortTitle = title.length > 50 ? title.substring(0, 50) + '...' : title;
        return `${emoji} ${shortTitle} | –î–∑—é–¥–æ –£–∫—Ä–∞—ó–Ω–∏ –§–î–£`;
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
     */
    createSEODescription(text, category) {
        const emoji = this.getCategoryEmoji(category);
        const cleanText = text.replace(/<[^>]*>/g, '').substring(0, 120);
        return `${emoji} ${cleanText}. –û—Ñ—ñ—Ü—ñ–π–Ω—ñ –Ω–æ–≤–∏–Ω–∏ –§–µ–¥–µ—Ä–∞—Ü—ñ—ó –î–∑—é–¥–æ –£–∫—Ä–∞—ó–Ω–∏, —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–º–∞–≥–∞–Ω—å —Ç–∞ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –¥–∑—é–¥–æ—ó—Å—Ç—ñ–≤.`;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    getCategoryEmoji(category) {
        const emojiMap = {
            'achievements': 'üèÜ',
            'competitions': 'ü•á',
            'events': 'üìÖ',
            'announcements': 'üì¢',
            'general': 'üì∞'
        };
        return emojiMap[category] || 'üì∞';
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å keywords –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—å–∏
     */
    createKeywords(article) {
        const baseKeywords = [
            '–¥–∑—é–¥–æ —É–∫—Ä–∞—ó–Ω–∞',
            '—Ñ–µ–¥–µ—Ä–∞—Ü—ñ—è –¥–∑—é–¥–æ —É–∫—Ä–∞—ó–Ω–∏',
            '—Ñ–¥—É',
            '–Ω–æ–≤–∏–Ω–∏ –¥–∑—é–¥–æ',
            '—É–∫—Ä–∞—ó–Ω—Å—å–∫–µ –¥–∑—é–¥–æ'
        ];

        // –î–æ–±–∞–≤–∏—Ç—å keywords –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const categoryKeywords = this.getCategoryKeywords(article.category);
        
        // –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥–∏ —Å—Ç–∞—Ç—å–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        const articleTags = article.tags ? article.tags.map(tag => tag.toLowerCase()) : [];
        
        return [...baseKeywords, ...categoryKeywords, ...articleTags].slice(0, 15).join(', ');
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å keywords –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    getCategoryKeywords(category) {
        const categoryMap = {
            'achievements': ['–¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è', '–ø–µ—Ä–µ–º–æ–≥–∏', '–Ω–∞–≥–æ—Ä–æ–¥–∏', '–º–µ–¥–∞–ª—ñ'],
            'competitions': ['–∑–º–∞–≥–∞–Ω–Ω—è', '—á–µ–º–ø—ñ–æ–Ω–∞—Ç', '—Ç—É—Ä–Ω—ñ—Ä', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏'],
            'events': ['–ø–æ–¥—ñ—ó', '–∫–∞–ª–µ–Ω–¥–∞—Ä', '–∞–Ω–æ–Ω—Å'],
            'announcements': ['–æ–≥–æ–ª–æ—à–µ–Ω–Ω—è', '–Ω–æ–≤–∏–Ω–∏', '—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è']
        };
        return categoryMap[category] || ['–Ω–æ–≤–∏–Ω–∏'];
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –º–µ—Ç–∞-—Ç–µ–≥–∏
     */
    updateBasicMetaTags(article) {
        // Title
        document.title = article.seoTitle;
        this.updateMetaTag('meta-title', 'content', article.seoTitle);
        
        // Description
        this.updateMetaTag('meta-description', 'content', article.seoDescription);
        
        // Keywords
        this.updateMetaTag('meta-keywords', 'content', article.keywords);
        
        // Author
        this.updateMetaTag('meta-author', 'content', this.organizationName);
        
        // Publish date
        this.updateMetaTag('meta-publish-date', 'content', article.publishDate);
        this.updateMetaTag('meta-article-published', 'content', article.publishDate);
        this.updateMetaTag('meta-article-modified', 'content', article.modifiedDate);
        
        // Article tags
        this.updateMetaTag('meta-article-tags', 'content', article.keywords);
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å Open Graph —Ç–µ–≥–∏
     */
    updateOpenGraphTags(article) {
        this.updateMetaTag('og-url', 'content', article.url);
        this.updateMetaTag('og-title', 'content', article.seoTitle);
        this.updateMetaTag('og-description', 'content', article.seoDescription);
        this.updateMetaTag('og-image', 'content', article.imageUrl);
        this.updateMetaTag('og-article-author', 'content', this.organizationName);
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å Twitter —Ç–µ–≥–∏
     */
    updateTwitterTags(article) {
        this.updateMetaTag('twitter-url', 'content', article.url);
        this.updateMetaTag('twitter-title', 'content', article.title);
        this.updateMetaTag('twitter-description', 'content', article.seoDescription);
        this.updateMetaTag('twitter-image', 'content', article.imageUrl);
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å JSON-LD structured data
     */
    updateStructuredData(article) {
        // Article structured data
        const articleSchema = {
            "@context": "https://schema.org",
            "@type": "NewsArticle",
            "headline": article.title,
            "description": article.seoDescription,
            "image": {
                "@type": "ImageObject",
                "url": article.imageUrl,
                "width": 1200,
                "height": 630
            },
            "author": {
                "@type": "Organization",
                "name": this.organizationName,
                "url": this.baseUrl
            },
            "publisher": {
                "@type": "Organization",
                "name": this.organizationName,
                "logo": {
                    "@type": "ImageObject",
                    "url": this.baseUrl + this.organizationLogo,
                    "width": 300,
                    "height": 300
                }
            },
            "datePublished": article.publishDate,
            "dateModified": article.modifiedDate,
            "mainEntityOfPage": {
                "@type": "WebPage",
                "@id": article.url
            },
            "inLanguage": "uk-UA",
            "about": {
                "@type": "Thing",
                "name": "–î–∑—é–¥–æ",
                "sameAs": "https://en.wikipedia.org/wiki/Judo"
            },
            "keywords": article.keywords,
            "articleSection": article.category || "–°–ø–æ—Ä—Ç",
            "wordCount": this.calculateWordCount(article.content),
            "articleBody": this.getCleanText(article.content)
        };

        this.updateJSONLD('article-structured-data', articleSchema);
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å breadcrumbs
     */
    updateBreadcrumbs(article) {
        // –û–±–Ω–æ–≤–∏—Ç—å –≤–∏–¥–∏–º—ã–π breadcrumb
        const breadcrumbTitle = document.getElementById('breadcrumb-title');
        if (breadcrumbTitle) {
            breadcrumbTitle.textContent = article.title;
        }

        // –û–±–Ω–æ–≤–∏—Ç—å JSON-LD breadcrumbs
        const breadcrumbSchema = {
            "@context": "https://schema.org",
            "@type": "BreadcrumbList",
            "itemListElement": [
                {
                    "@type": "ListItem",
                    "position": 1,
                    "name": "–ì–æ–ª–æ–≤–Ω–∞",
                    "item": this.baseUrl
                },
                {
                    "@type": "ListItem",
                    "position": 2,
                    "name": "–ù–æ–≤–∏–Ω–∏",
                    "item": this.baseUrl + "news.html"
                },
                {
                    "@type": "ListItem",
                    "position": 3,
                    "name": article.title,
                    "item": article.url
                }
            ]
        };

        this.updateJSONLD('breadcrumb-structured-data', breadcrumbSchema);
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å canonical URL
     */
    updateCanonicalUrl(article) {
        this.updateLinkTag('canonical-url', 'href', article.url);
        this.updateLinkTag('hreflang-uk', 'href', article.url);
        this.updateLinkTag('hreflang-default', 'href', article.url);
    }

    /**
     * –£—Ç–∏–ª–∏—Ç—ã
     */
    
    updateMetaTag(id, attribute, value) {
        const element = document.getElementById(id);
        if (element) {
            element.setAttribute(attribute, value);
        }
    }

    updateLinkTag(id, attribute, value) {
        const element = document.getElementById(id);
        if (element) {
            element.setAttribute(attribute, value);
        }
    }

    updateJSONLD(id, schema) {
        const element = document.getElementById(id);
        if (element) {
            element.textContent = JSON.stringify(schema, null, 2);
        }
    }

    getCurrentArticleUrl() {
        return window.location.href;
    }

    getFullImageUrl(imagePath) {
        if (!imagePath) return this.baseUrl + this.defaultImage;
        if (imagePath.startsWith('http')) return imagePath;
        return this.baseUrl + imagePath.replace(/^\//, '');
    }

    formatDate(dateString) {
        try {
            const date = new Date(dateString);
            return date.toISOString();
        } catch (error) {
            return new Date().toISOString();
        }
    }

    calculateWordCount(content) {
        if (!content) return 0;
        const cleanText = this.getCleanText(content);
        return cleanText.split(/\s+/).filter(word => word.length > 0).length;
    }

    getCleanText(html) {
        if (!html) return '';
        const temp = document.createElement('div');
        temp.innerHTML = html;
        return temp.textContent || temp.innerText || '';
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
     */
    updateArticleImage(article) {
        const img = document.getElementById('article-image');
        const imgContainer = img?.parentElement;
        
        if (img && article.image) {
            img.src = this.getFullImageUrl(article.image);
            img.alt = `–§–æ—Ç–æ –¥–æ –Ω–æ–≤–∏–Ω–∏: ${article.title} - –§–µ–¥–µ—Ä–∞—Ü—ñ—è –î–∑—é–¥–æ –£–∫—Ä–∞—ó–Ω–∏`;
            
            // –û–±–Ω–æ–≤–∏—Ç—å schema –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if (imgContainer) {
                const captionMeta = imgContainer.querySelector('meta[itemprop="caption"]');
                if (captionMeta) {
                    captionMeta.setAttribute('content', article.title);
                }
            }
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã–µ –≤ —Å–∫—Ä—ã—Ç—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
     */
    updateHiddenMetaData(article) {
        // –û–±–Ω–æ–≤–∏—Ç—å description meta
        const descMeta = document.getElementById('article-description-meta');
        if (descMeta) {
            descMeta.setAttribute('content', article.seoDescription);
        }

        // –û–±–Ω–æ–≤–∏—Ç—å date modified
        const dateModified = document.getElementById('article-date-modified');
        if (dateModified) {
            dateModified.setAttribute('content', article.modifiedDate);
        }

        // –û–±–Ω–æ–≤–∏—Ç—å mainEntityOfPage
        const mainEntity = document.querySelector('meta[itemprop="mainEntityOfPage"]');
        if (mainEntity) {
            mainEntity.setAttribute('content', article.url);
        }
    }

    /**
     * –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å—Ç–∞—Ç—å–∏
     */
    updateFullArticlePage(article) {
        this.updateArticleSEO(article);
        this.updateArticleImage(article);
        this.updateHiddenMetaData(article);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = ArticleSEO;
} else if (typeof window !== 'undefined') {
    window.ArticleSEO = ArticleSEO;
} 