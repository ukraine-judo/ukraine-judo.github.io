/**
 * –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ø–æ—Ö–æ–∂–∏—Ö —Å—Ç–∞—Ç–µ–π
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–±–æ—Ç—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞
 */

class RelatedArticlesDebugger {
    constructor() {
        this.loader = new NewsLoader();
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç–∞—Ç—å–∏
     */
    async testArticle(articleId) {
        try {
            const article = await this.loader.loadArticle(articleId);
            if (!article) {
                console.error(`–°—Ç–∞—Ç—å—è ${articleId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
                return;
            }

            console.log(`\n=== –ê–ù–ê–õ–ò–ó –ü–û–•–û–ñ–ò–• –°–¢–ê–¢–ï–ô ===`);
            console.log(`–°—Ç–∞—Ç—å—è: "${article.title}"`);
            console.log(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${article.category}`);
            console.log(`–¢–µ–≥–∏: ${article.tags ? article.tags.join(', ') : '–Ω–µ—Ç'}`);
            console.log(`–ê–≤—Ç–æ—Ä: ${article.author?.name || '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}`);
            console.log(`–î–∞—Ç–∞: ${new Date(article.publishedAt).toLocaleDateString('uk-UA')}`);
            
            // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
            if (article.related && article.related.length > 0) {
                console.log(`\n--- –ü–†–ï–î–û–ü–†–ï–î–ï–õ–ï–ù–ù–´–ï –°–í–Ø–ó–ê–ù–ù–´–ï (${article.related.length}) ---`);
                const manifest = await this.loader.createArticlesManifest();
                const predefinedRelated = manifest.articles.filter(a => 
                    article.related.includes(a.id)
                );
                predefinedRelated.forEach((related, index) => {
                    console.log(`${index + 1}. "${related.title}" (ID: ${related.id})`);
                });
            }

            // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞
            console.log(`\n--- –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –ê–õ–ì–û–†–ò–¢–ú–ê ---`);
            const suggestions = await this.loader.suggestRelatedArticles(article, 10);
            
            suggestions.forEach((item, index) => {
                console.log(`${index + 1}. "${item.article.title}" (ID: ${item.article.id})`);
                console.log(`   –†–µ–π—Ç–∏–Ω–≥: ${item.score}`);
                console.log(`   –ü—Ä–∏—á–∏–Ω—ã: ${item.reasons.join('; ')}`);
                console.log('');
            });

            // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            console.log(`\n--- –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ ---`);
            const finalRelated = await this.loader.getRelatedArticles(article, 4);
            finalRelated.forEach((related, index) => {
                console.log(`${index + 1}. "${related.title}" (ID: ${related.id})`);
            });

            return {
                article,
                suggestions,
                finalRelated
            };

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
        }
    }

    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Å—Ç–∞—Ç—å–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
     */
    async analyzeAll() {
        try {
            const manifest = await this.loader.createArticlesManifest();
            const articles = manifest.articles;
            
            console.log(`\n=== –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===`);
            console.log(`–í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π: ${articles.length}`);
            
            const withPredefined = articles.filter(a => a.related && a.related.length > 0);
            console.log(`–°—Ç–∞—Ç–µ–π —Å –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏: ${withPredefined.length}`);
            
            const avgPredefined = withPredefined.length > 0 ? 
                withPredefined.reduce((sum, a) => sum + a.related.length, 0) / withPredefined.length : 0;
            console.log(`–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π: ${avgPredefined.toFixed(1)}`);

            // –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            const categories = {};
            articles.forEach(article => {
                if (!categories[article.category]) {
                    categories[article.category] = 0;
                }
                categories[article.category]++;
            });

            console.log(`\n--- –°–¢–ê–¢–¨–ò –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú ---`);
            Object.entries(categories).forEach(([category, count]) => {
                console.log(`${category}: ${count} —Å—Ç–∞—Ç–µ–π`);
            });

            // –ê–Ω–∞–ª–∏–∑ —Ç–µ–≥–æ–≤
            const tagCounts = {};
            articles.forEach(article => {
                if (article.tags) {
                    article.tags.forEach(tag => {
                        tagCounts[tag] = (tagCounts[tag] || 0) + 1;
                    });
                }
            });

            const popularTags = Object.entries(tagCounts)
                .sort(([,a], [,b]) => b - a)
                .slice(0, 10);

            console.log(`\n--- –ü–û–ü–£–õ–Ø–†–ù–´–ï –¢–ï–ì–ò ---`);
            popularTags.forEach(([tag, count]) => {
                console.log(`${tag}: ${count} —Å—Ç–∞—Ç–µ–π`);
            });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:', error);
        }
    }

    /**
     * –ù–∞—Ö–æ–¥–∏—Ç —Å—Ç–∞—Ç—å–∏ –±–µ–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏—Ö
     */
    async findOrphans() {
        try {
            const manifest = await this.loader.createArticlesManifest();
            const orphans = manifest.articles.filter(article => 
                !article.related || article.related.length === 0
            );

            console.log(`\n=== –°–¢–ê–¢–¨–ò –ë–ï–ó –°–í–Ø–ó–ê–ù–ù–´–• (${orphans.length}) ===`);
            
            for (const orphan of orphans.slice(0, 5)) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                console.log(`\n–°—Ç–∞—Ç—å—è: "${orphan.title}" (ID: ${orphan.id})`);
                const suggestions = await this.loader.suggestRelatedArticles(orphan, 3);
                
                if (suggestions.length > 0) {
                    console.log('–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ:');
                    suggestions.forEach((item, index) => {
                        console.log(`  ${index + 1}. "${item.article.title}" (—Ä–µ–π—Ç–∏–Ω–≥: ${item.score})`);
                    });
                } else {
                    console.log('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π');
                }
            }

            return orphans;

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–∏—Ä–æ—Ç:', error);
        }
    }

    /**
     * –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞: —Å—Ç–∞—Ä—ã–π –∏ –Ω–æ–≤—ã–π
     */
    async compareAlgorithms(articleId) {
        try {
            const article = await this.loader.loadArticle(articleId);
            if (!article) {
                console.error(`–°—Ç–∞—Ç—å—è ${articleId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
                return;
            }

            // –°—Ç–∞—Ä—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º (–ø—Ä–æ—Å—Ç–æ–π)
            const manifest = await this.loader.createArticlesManifest();
            const oldResults = manifest.articles
                .filter(a => 
                    a.id !== article.id &&
                    (a.category === article.category ||
                     (article.tags && a.tags && 
                      article.tags.some(tag => a.tags.includes(tag))))
                )
                .slice(0, 4);

            // –ù–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
            const newResults = await this.loader.getRelatedArticles(article, 4);

            console.log(`\n=== –°–†–ê–í–ù–ï–ù–ò–ï –ê–õ–ì–û–†–ò–¢–ú–û–í ===`);
            console.log(`–°—Ç–∞—Ç—å—è: "${article.title}"`);
            
            console.log(`\n--- –°–¢–ê–†–´–ô –ê–õ–ì–û–†–ò–¢–ú ---`);
            oldResults.forEach((related, index) => {
                console.log(`${index + 1}. "${related.title}"`);
            });

            console.log(`\n--- –ù–û–í–´–ô –ê–õ–ì–û–†–ò–¢–ú ---`);
            newResults.forEach((related, index) => {
                console.log(`${index + 1}. "${related.title}"`);
            });

            // –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–∏–π
            const oldIds = new Set(oldResults.map(a => a.id));
            const newIds = new Set(newResults.map(a => a.id));
            
            const onlyInOld = oldResults.filter(a => !newIds.has(a.id));
            const onlyInNew = newResults.filter(a => !oldIds.has(a.id));

            if (onlyInOld.length > 0) {
                console.log(`\n--- –¢–û–õ–¨–ö–û –í –°–¢–ê–†–û–ú ---`);
                onlyInOld.forEach(a => console.log(`- "${a.title}"`));
            }

            if (onlyInNew.length > 0) {
                console.log(`\n--- –¢–û–õ–¨–ö–û –í –ù–û–í–û–ú ---`);
                onlyInNew.forEach(a => console.log(`- "${a.title}"`));
            }

            return { oldResults, newResults };

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏:', error);
        }
    }
}

// –î–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
if (typeof window !== 'undefined') {
    window.RelatedArticlesDebugger = RelatedArticlesDebugger;
    
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    window.relatedDebug = new RelatedArticlesDebugger();
    
    console.log('üîß Related Articles Debugger –∑–∞–≥—Ä—É–∂–µ–Ω!');
    console.log('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: relatedDebug.testArticle(ID) –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    console.log('–ò–ª–∏: relatedDebug.analyzeAll() –¥–ª—è –æ–±—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞');
} 